
package model;

import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.HashSet;
import java.util.Map.Entry;
import java.io.Serializable;

/**
 * This Singleton Class represents a Lookup Table
 * 	for Items based on their barcodes and if they are currently
 * 	in the Tracking System.
 * Impelemented with HashMaps and HashSets
 * @author Christopher Tensmeyer
 * @version Phase 1.0 Jan 26, 2013
*/
public class ItemManager implements Serializable
{
	/*
		Responsibilities:
			Get Live Items
			Get all Dead
			Product Container -> Set<Item>
			(Product Container, Product) -> Set<Item>
			Product -> Set<Item>
				can we implement this as the intersection of the two maps?

			canAddItem(Item params)
			addItem(Item params)
			removeProduct(Container, Product)
			transfer(Item -> StorageUnit)
			canPurge(Product)
			transfer(Product, Old Conatainer, New Container)
	*/
	/**
	 * 
	 */
	private static final long serialVersionUID = -2560037083665187901L;
	
	private static ItemManager _manager;
	private Map<ItemBarcode,Item> liveTable;
	private Map<ItemBarcode,Item> deadTable;
	private Map<ProductContainer,Set<Item>> itemsByProductContainer;
	private Map<Product,Set<Item>> itemsByProduct;

	private ItemManager()
	{
		liveTable = new HashMap<ItemBarcode,Item>();
		deadTable = new HashMap<ItemBarcode,Item>();
	}

	/** Returns the single instance of ItemManager
	 * 
	 * @return	The single instance of ItemManager
	 */
	public static ItemManager instance()
	{
		if(_manager == null)
			_manager = new ItemManager();
		return _manager;
	}

	/** Stores an Item in the ItemManager.  Items are never overridden.  If an Item with that
			Barcode already exists, item is not added to the table.
		@param item The Item to be stored.
		@return Returns true if item was added to the ItemManager.
	*/

	public boolean store(Item item)
	{
		if(item.isInSystem())
			return storeHelper(item, liveTable);
		else
			return storeHelper(item, deadTable);
	}

	//Utility for storing an Item in a specific table
	private boolean storeHelper(Item item, Map<ItemBarcode, Item> map)
	{
		ItemBarcode barcode = item.getItemBarcode();
		boolean isNewItem = !map.containsKey(barcode);
		if(isNewItem)
			map.put(barcode, item);
		return isNewItem;
	}

	/** Test for membership of an Item
		@param barcode The Barcode of the Item we are looking for
		@return Returns true if the ItemManager contains an Item with ItemBarcode barcode
	*/
	public boolean contains(ItemBarcode barcode)
	{
		return liveTable.containsKey(barcode) || deadTable.containsKey(barcode);
	}

	/** Test for membership of an Item
		@param item The Item we are looking for
		@return Returns true if the ItemManager contains the Item
	*/
	public boolean contains(Item item)
	{
		return this.contains(item.getItemBarcode());
	}

	/** The number of Items contained
		@return the number of Items both in Storage and Removed
	*/
	public int totalItems()
	{
		return liveTable.size() + deadTable.size();
	}

	/** The number of Items in the Tracking System
		@return Returns the number of Items currenly in Storage
	*/
	public int numSystemItems()
	{
		return liveTable.size();
	}

	/** The number of Removed Items
		@return Returns the number of Items that have been removed from Storage
	*/
	public int numRemovedItems()
	{
		return deadTable.size();
	}

	/** Ask if the Item is currenly in the System
		@param barcode The ItemBarcode of the Item in question
		@return Returns true if the Item is in Storage
	*/
	public boolean isInSystem(ItemBarcode barcode)
	{
		return liveTable.containsKey(barcode);
	}

	/** Ask if the Item has been removed from the System
		@param barcode The ItemBarcode of the Item in question
		@return Returns true if the Item has been removed
	*/
	public boolean isRemoved(ItemBarcode barcode)
	{
		return deadTable.containsKey(barcode);
	}

	/** Removes an Item from the System
		@param barcode The ItemBarcode of the Item in question
		@throws ItemNotFoundException If the Item is not recognized
		@throws ItemAlreadyRemovedException If the Item has already been removed
	*/
	public void removeItem(ItemBarcode barcode) throws ItemNotFoundException, ItemAlreadyRemovedException
	{
		if(!this.contains(barcode))
			throw new ItemNotFoundException(barcode);
		if(deadTable.containsKey(barcode))
			throw new ItemAlreadyRemovedException(barcode);
		Item item = liveTable.get(barcode);
		item.remove();
		liveTable.remove(barcode);
		deadTable.put(barcode,item);
	}

	/** Finds the Item
		@param barcode The ItemBarcode of the Item
		@return Returns - The Item if it is found, otherwise returns null
	*/
	public Item find(ItemBarcode barcode)
	{
		if(liveTable.containsKey(barcode))
			return liveTable.get(barcode);
		else if(deadTable.containsKey(barcode))
			return deadTable.get(barcode);
		else
			return null;
	}

	/** Finds the Item if it is in the System
		@param barcode The ItemBarcode of the Item
		@return Returns - The Item if it is found in the System, otherwise returns null
	*/
	public Item findInSystem(ItemBarcode barcode)
	{
		if(liveTable.containsKey(barcode))
			return liveTable.get(barcode);
		else
			return null;
	}

	/** Finds the Item if it has been removed from the System
		@param barcode The ItemBarcode of the Item
		@return Returns - The Item if it has been removed from the system, otherwise null
	*/
	public Item findRemoved(ItemBarcode barcode)
	{
		if(deadTable.containsKey(barcode))
			return deadTable.get(barcode);
		else
			return null;
	}

	/** Returns a set of all Items
		@return Returns a set of all Items
	*/
	public Set<Item> allItems()
	{
		Set<Item> items = new HashSet<Item>();
		for(Map.Entry<ItemBarcode,Item> entry: liveTable.entrySet())
			items.add(entry.getValue());
		for(Map.Entry<ItemBarcode,Item> entry: deadTable.entrySet())
			items.add(entry.getValue());
		return items;
	}

	/** Returns a set of all Items in the System
		@return Returns a set of all Items in the System
	*/
	public Set<Item> allSystemItems()
	{
		Set<Item> items = new HashSet<Item>();
		for(Map.Entry<ItemBarcode,Item> entry: liveTable.entrySet())
			items.add(entry.getValue());
		return items;
	}

	/** Returns a set of all Removed Items
		@return Returns a set of all Removed Items
	*/
	public Set<Item> allRemovedItems()
	{
		Set<Item> items = new HashSet<Item>();
		for(Map.Entry<ItemBarcode,Item> entry: deadTable.entrySet())
			items.add(entry.getValue());
		return items;
	}

	/** Precondition: !hasSystemItem(product)
		Postcondition: All Items in the Removed Table are purged (permanently deleted)
		@param product The product we wish to purge
		@throws IllegalItemOperationException If the precondition is violated
	*/
	public void purgeProduct(Product product) throws IllegalItemOperationException
	{
		if(hasSystemItem(product))
			throw new IllegalItemOperationException();
		//...
	
	}

	/** Check the System for an Item of that Product 
		@param product The product we are searching for
		@return Returns true if there is an Item in the system that is an instance
			of product
		TODO implement
	*/
	public boolean hasSystemItem(Product product)
	{
		throw new UnsupportedOperationException("Not Implemented");
	}

	/** Inserts the item into the table
		TODO: implement.  is it different from store()?
	*/
	public boolean index(Item i)
	{
		throw new UnsupportedOperationException("Not Implemented");
	}

////////////////////////////////////working zone/////////////////////////////////////////////

	/** This evaluates to true if we can construct an Item from these parameters
		@param p A Product - Specifies what kind of Item
		@param su A StorageUnit - Specifies where the Item lives
		@param c A Calendar - Specifies when the Item enters the system
		@return Returns true if we can construct an Item from these parameters
		TODO: Get validation methods for Product and SU
	*/
	public boolean canAddItem(Product p, StorageUnit su, Calendar c)
	{
		if(!Item.isValidEntryDate(c))
			return false;
		throw new UnsupportedOperationException("Not Implemented");
	}

	/** This evaluates to true if we can construct an Item from these parameters
		@param p A Product - Specifies what kind of Item
		@param su A StorageUnit - Specifies where the Item lives
		@return Returns true if we can construct an Item from these parameters
		TODO: Get validation methods for Product and SU
	*/
	public boolean canAddItem(Product p, StorageUnit su)
	{
		//Calendar c = Calendar.getInstance();
		//return canAddItem(p, su, c);
		throw new UnsupportedOperationException("Not Implemented");
	}

	/** This adds an Item to the system with these properties.  Appropiately indexs it
		@param p A Product - Specifies what kind of Item
		@param su A StorageUnit - Specifies where the Item lives
		@param c A Calendar - Specifies when the Item enters the system
		@throws IllegalArgumentException If !canAddItem(p, su, c)
		@return Returns the Item made
	*/
	public Item addItem(Product p, StorageUnit su, Calendar c)
	{
		if(!canAddItem(p, su, c))
			throw new IllegalArgumentException();
		Item item = new Item(p, su, c);
		index(item);
		return item;
	}

	/** This adds an Item to the system with the current time as the entryTime.
			Appropiately indexes the Item.
		@param p A Product - Specifies what kind of Item
		@param su A StorageUnit - Specifies where the Item lives
		@throws IllegalArgumentException If !canAddItem(p, su)
		@return Returns the Item made
	*/
	public Item addItem(Product p, StorageUnit su)
	{
		return addItem(p, su, Calendar.getInstance());
	}

	/** Updates the Item indexing to reflect removing a Product from a ProductContainer
			All Items of that product should be moved to the Storage Unit level
		@param container This should be a Product Group. 
		@param product The product beeing removed.
		@throws NullPointerException If container or product is null
	*/
	public void removeProduct(ProductContainer container, Product product)
	{
		if(container == null)
			throw new NullPointerException("ProductContainer is null");
		if(product == null)
			throw new NullPointerException("Product is null");
		throw new UnsupportedOperationException("Not Implemented");
	}

	/** transfers the item to the appropiate StorageUnit
		@param item The Item to be transfered
		@param targer Where the Item is moving.  It will be added to the appropiate
			sub ProductGroup where Product of the Item resides
		@throws NullPointerException If item or target is null
	*/
	public void transfer(Item item, StorageUnit target)
	{
		if(item == null)
			throw new NullPointerException("Item is null");
		if(target == null)
			throw new NullPointerException("Storage Unit is null");
		throw new UnsupportedOperationException("Not impelemented");
	}
	

	/** You can only purge a Product from the system if no items of that Product exist
		@param product The product we wish to purge from the system
		@throws NullpointerException If product is null
		@return Returns true if no Items are live in the system of this product
	*/
	public boolean canPurge(Product product)
	{
		if(product == null)
			throw new NullPointerException("Product is null");
		//This can only look at the live table
		//Or it asks for the product and searches all items of it's type
		throw new UnsupportedOperationException("Not implemented");
	}
}


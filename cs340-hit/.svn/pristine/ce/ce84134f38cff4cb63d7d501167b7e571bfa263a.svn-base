package model;

import static org.junit.Assert.*;

import java.util.Iterator;
import java.util.Set;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.ArrayList;

import org.junit.AfterClass;
import org.junit.Before;
import org.junit.Test;

public class FacadeBasicTest extends FacadeTest {
	
	@Before
	public void initBasicTest()
	{
		super.init();
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void testAddNullStorageUnit()
	{
		fa.addStorageUnit(null);
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void testAddEmptyStorageUnit()
	{
		fa.addStorageUnit("");
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void testAddDuplicateStorageUnit()
	{
		fa.addStorageUnit("Library");
		fa.addStorageUnit("Library");
	}
	
	@Test
	public void testUpdateUnitName()
	{
		fe.setStorageUnitName(basement, "Dungeon");
		assertTrue(basement.getName().equals("Dungeon"));
		assertTrue(House.instance().containsUnit(basement));
		
		Set<StorageUnit> units = f.getStorageUnits();
		Iterator<StorageUnit> iter = units.iterator();
		while(iter.hasNext())
			assertFalse(iter.next().getName().equals("Basement"));
		
		StorageUnit temp = fa.addStorageUnit("Basement");
		assertTrue(temp.getName().equals("Basement"));
		fd.deleteStorageUnit(temp);
		assertTrue(House.instance().containsUnit(basement));
		
		units = f.getStorageUnits();
		iter = units.iterator();
		while(iter.hasNext())
			assertFalse(iter.next().getName().equals("Basement"));
		
		fe.setStorageUnitName(basement, "Basement");
		assertTrue(basement.getName().equals("Basement"));
	}

	@Test
	public void testProductGroups()
	{
		ProductGroup pg1 = fa.addProductGroup("PG1", new Size(1.0, SupplyType.COUNT), kitchen);
		Set<String> names = f.getChildContainers(kitchen);
		assertTrue(names.contains(pg1.getName()));
		assertEquals(pg1, kitchen.getProductContainer(pg1.getName()));

		Product p1 = products.get(0);
		fa.addProductToContainer(p1, pg1);
	}

	@Test
	public void addItems()
	{
		for(int k = 0; k < items.size(); k++)
		{
			Item item = items.get(k);
			assertNotNull(item);
			assertTrue(fa.canAddItem(item));
			fa.addItem(item);
		}
		Item faulty = new Item(null, null, null);
		assertFalse(fa.canAddItem(faulty));
	}
	
}

package gui.item;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.text.SimpleDateFormat;

import model.Item;
import model.Product;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.File;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;

public class BarcodePrinter
{
	private static String defaultFilename = "pdfs/default.pdf";
	private static final int WIDTH = 1000;
	private static final int HEIGHT = 500;
	private static final int BARCODES_PER_ROW = 8;
	private String filename;

	//for testing purposes
	
	public BarcodePrinter()
	{
		this(defaultFilename);
	}

	public BarcodePrinter(String fn)
	{
		filename = fn;
	}

	/** Writes a pdf containing barcodes.
		@param items The list of Items for which we wish to print the barcodes for	
		@param filename The location where the pdf is to be written
		@throws IOException If the file cannot be written
		@return The File object associated with the newly created pdf
	*/
	public File writeBarcodesToPdf(Collection<Item> items) throws IOException
	{
		try
		{
			Document document = new Document(new Rectangle(WIDTH, HEIGHT));
			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(this.filename));
			document.open();
			PdfContentByte cb = writer.getDirectContent();
			BarcodeEAN barcodeMaker = new BarcodeEAN();

			PdfPTable table = new PdfPTable(BARCODES_PER_ROW);

			Iterator<Item> iterator = items.iterator();

			while(iterator.hasNext())
				addRow(table, iterator, writer);

			document.add(table);
			document.close();
		}
		catch(DocumentException e)
		{
			throw new IOException("Could not produce pdf");
		}

		return new File(this.filename);
	}

	private void addRow(PdfPTable table, Iterator<Item> iterator, PdfWriter writer) throws IOException
	{
		int numAdded = 0;
		PdfContentByte cb = writer.getDirectContent();
		BarcodeEAN barcodeMaker = new BarcodeEAN();

		List<PdfPCell> barcodes = new ArrayList<PdfPCell>();
		List<PdfPCell> descriptions = new ArrayList<PdfPCell>();

		//TODO make the parallel sets of cells
		while(numAdded < BARCODES_PER_ROW)
		{
			if(iterator.hasNext())
			{
				Item item = iterator.next();
				barcodeMaker.setCodeType(Barcode.UPCA);
				barcodeMaker.setCode(item.getItemBarcode().toString());

				PdfPCell barcodeCell = new PdfPCell(barcodeMaker.createImageWithBarcode(cb, null, null));
				barcodeCell.setBorder(Rectangle.NO_BORDER);
				barcodes.add(barcodeCell);

				String description = formatDescription(item);	
				PdfPCell descriptionCell = new PdfPCell(new Phrase(description));
				descriptionCell.setBorder(Rectangle.NO_BORDER);
				descriptions.add(descriptionCell);
			}
			else
			{
				//pad the empty cells in the last row
				PdfPCell emptyCell = new PdfPCell();
				emptyCell.setBorder(Rectangle.NO_BORDER);
				barcodes.add(emptyCell);

				emptyCell = new PdfPCell();
				emptyCell.setBorder(Rectangle.NO_BORDER);
				descriptions.add(emptyCell);
			}
			numAdded++;
		}

		for(int k = 0; k < descriptions.size(); k++)
			table.addCell(descriptions.get(k));

		for(int k = 0; k < barcodes.size(); k++)
			table.addCell(barcodes.get(k));
	}

	private String formatDescription(Item item)
	{
		String rtrn = "";
		rtrn += item.getDescription();
		rtrn += "\n";
		rtrn += formatDate(item.getEntryDate().getTime());
		if(item.hasExpirationDate())
		{
			rtrn += " exp ";
			rtrn += formatDate(item.getExpirationDate().getTime());
		}
		return rtrn;
	}

	private String formatDate(Date date)
	{
		SimpleDateFormat format = new SimpleDateFormat("mm/dd/yyyy");
		return format.format(date);
	}


}


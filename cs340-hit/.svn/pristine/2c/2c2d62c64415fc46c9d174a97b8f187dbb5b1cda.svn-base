package gui.batches;

import gui.common.*;
import gui.inventory.*;
import gui.product.*;
import java.util.ArrayList;
import java.util.List;
import model.*;

/**
 * Controller class for the transfer item batch view.
 */
public class TransferItemBatchController extends Controller implements
		ITransferItemBatchController {
	
	private boolean useScanner;
        private ProductContainerData targetData;
        private StorageUnit targetContainer;
        private List<Item> allBatchItems;
	
	/**
	 * Constructor.
	 * 
	 * @param view Reference to the transfer item batch view.
	 * @param target Reference to the storage unit to which items are being transferred.
	 */
	public TransferItemBatchController(IView view, ProductContainerData target) 
        {
		super(view);
                
                targetData = target;
                
		construct();
                
	}
	
	/**
	 * Returns a reference to the view for this controller.
	 */
	@Override
	protected ITransferItemBatchView getView() 
        {
		return (ITransferItemBatchView)super.getView();
	}

	/**
	 * Loads data into the controller's view.
	 * 
	 *  {@pre None}
	 *  
	 *  {@post The controller has loaded data into its view}
	 */
	@Override
	protected void loadValues() 
        {
		targetContainer = Translator.instance().getProductContainerFromData(targetData).getRoot();
		
		allBatchItems = new ArrayList<>();
                useScanner = getView().getUseScanner();
	}

	/**
	 * Sets the enable/disable state of all components in the controller's view.
	 * A component should be enabled only if the user is currently
	 * allowed to interact with that component.
	 * 
	 * {@pre None}
	 * 
	 * {@post The enable/disable state of all components in the controller's view
	 * have been set appropriately.}
	 */
	@Override
	protected void enableComponents() 
        {
            getView().enableRedo(false);
            getView().enableUndo(false);
            if (validate())
            {
                getView().enableItemAction(true);
            }
            else
            {
                getView().enableItemAction(false);
            }
                
	}

	/**
	 * This method is called when the "Item Barcode" field in the
	 * transfer item batch view is changed by the user.
	 */
	@Override
	public void barcodeChanged() 
        {
            //Note: There should have been a function on the facade for this, I think.
            //We might need to change this later.
            enableComponents();
	}
	
	/**
	 * This method is called when the "Use Barcode Scanner" setting in the
	 * transfer item batch view is changed by the user.
	 */
	@Override
	public void useScannerChanged() 
        {
            useScanner = getView().getUseScanner();
	}
	
	/**
	 * This method is called when the selected product changes
	 * in the transfer item batch view.
	 */
	@Override
	public void selectedProductChanged() 
        {

	}
	
	/**
	 * This method is called when the user clicks the "Transfer Item" button
	 * in the transfer item batch view.
	 */
	@Override
	public void transferItem() 
        {
            System.out.println("Hit it!");
	}
	
	/**
	 * This method is called when the user clicks the "Redo" button
	 * in the transfer item batch view.
	 */
	@Override
	public void redo() 
        {
            throw new UnsupportedOperationException("This didn't need to be done for Phase 2!");
	}

	/**
	 * This method is called when the user clicks the "Undo" button
	 * in the transfer item batch view.
	 */
	@Override
	public void undo() 
        {
            throw new UnsupportedOperationException("This didn't need to be done for Phase 2!");
	}

	/**
	 * This method is called when the user clicks the "Done" button
	 * in the transfer item batch view.
	 */
	@Override
	public void done() 
        {
		getView().close();
	}

    private boolean validate() 
    {
        try
        {
            if(!ItemManager.instance().contains(new ItemBarcode(getView().getBarcode())))
            {
                return false;
            }
            return true;
        }
        catch (IllegalArgumentException e)
        {
            //Implies it's not valid.
            return false;
        }
    }
}


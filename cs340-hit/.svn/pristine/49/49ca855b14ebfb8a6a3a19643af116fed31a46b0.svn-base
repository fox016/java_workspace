package model;

/** This class represents a StorageUnit, which contains
 *  Items and Product Groups
 *
 * @author Talonos
 */
public class StorageUnitImpl extends ProductContainerImpl implements StorageUnit
{
	private static final long serialVersionUID = -2049857044314078747L;
	
	private String name;
	
	public StorageUnitImpl(String name)
	{
		this.name = name;
	}
  
    /**
     * Adds item to this Storage unit. If the item is of a product type that
     * does not currently exist anywhere within this storage unit, then this
     * method adds the product to the top level of this Storage Unit
     * automatically. <br><br>
     * 
     * This method cannot be used to add an item to a storage unit if it is 
     * already in the house. For that, use transferItem. <br><br>
     * 
     * This method registers the item with the item manager, puts it in the 
     * appropriate storage unit, and updates the pointer in the item to point 
     * to this storage unit.
     * 
     * @throws IllegalArgumentException if the item is null or if the item is 
     * already in the house.
     * @param item The Item to add
     */
    @Override
    public void addItem(Item item) throws IllegalArgumentException
    {
    	if(item == null)
    	{
            throw new IllegalArgumentException("Cannot add null Item to Storage Unit");
    	}
        if (ItemManager.instance().isInSystem(item.getItemBarcode()))
        {
            throw new IllegalArgumentException("Item already in house; use transferItem instead.");
        }
        
        ItemManager.instance().store(item);
        ItemManager.instance().transfer(item, this);
    	item.setStorageUnit(this);
    }
    
    /**
     * Removes an item from this storage unit. By default, this item does not go
     * anywhere else. To transfer items from one Storage Unit to another, use
     * TransferItems.
     * <br><br>
     * This method calls the item manager to notify that the item was removed,
     * and then sets the items "removed" flag to true.
     * 
     * @throws IllegalArgumentException if item is not in this Storage Unit
     * 
     * @param item The item to remove
     */
    @Override
    public void removeItem(Item item) throws IllegalArgumentException
    {
        if(item == null)
    	{
            throw new IllegalArgumentException("Cannot remove null Item from Storage Unit");
    	}
        if(ItemManager.instance().isRemoved(null))
        {
            throw new IllegalArgumentException("Item is already removed!");
        }
    	if(!(this.containsItem(item)))
    	{
    	    throw new IllegalArgumentException("Cannot remove item " +
    	      item.getItemBarcode().toString() + " because it is not in unit " + name);
        }
        
        ItemManager.instance().removeItem(item.getItemBarcode());
    	item.remove();
    }
    
    /**
     * Transfers items from the calling storage unit to the storage unit
     * specified by "Destination".
     * <br><br>
     * 
     * @throws IllegalArgumentException item must be in unit, destination must be valid Storage Unit
     * @param item the barcodes of the items to transfer.
     * @param destination the storage unit to transfer them to.
     */
    @Override
    public void transferItem(Item item, StorageUnit destination) throws IllegalArgumentException
    {
        if(item == null)
    	{
            throw new IllegalArgumentException("Cannot transfer a null Item from Storage Unit");
    	}
        if(destination == null)
    	{
    	    throw new IllegalArgumentException("Cannot transfer item to null Storage Unit");
    	}
    	if(!(this.containsItem(item)))
    	{
    	    throw new IllegalArgumentException("Cannot transfer item " +
    	        item.getItemBarcode().toString() + " because it is not in unit " + name);
    	}
    	if(destination.equals(this))
    	{
    	    throw new IllegalArgumentException("Item already in Storage Unit " + name);
    	}
        if(ItemManager.instance().isRemoved(null))
        {
            throw new IllegalArgumentException("Item is removed!");
        }
        
    	item.setStorageUnit(destination);
        ItemManager.instance().transfer(item, destination);
    }
    
    /**
     * Returns the name of the Storage Unit
     * 
     * @throws IllegalStateException Storage Unit should have name upon construction
     * @return name of Storage Unit
     */
    @Override
    public String getName() throws IllegalStateException
    {
    	if(name == null||name == "")
    	{
    		throw new IllegalStateException("Storage Unit should have name upon construction");
    	}
    	
    	return name;
    }
    
    /**
     * This method should be called from the House, which
     * checks to make sure that the new name is valid
     * 
     * @Deprecated Not needed and unsafe. House should contain a list of 
     * "ChangableProductContainer", which has a rename method. If you make the
     * rename method public, then anybody can call it! Also, by putting it in
     * storage unit, you cannot polymorphically inherit it from the base class
     * "ProductContainer," weakening the composite design.
     * @throws IllegalArgumentException if name is not valid
     * @param newName
     */
    @Override
    public void setName(String newName) throws IllegalArgumentException
    {
    	if(!(House.instance().isValidName(newName)))
    	{
    	    throw new IllegalArgumentException("The name " + newName + " is not valid");
    	}
    	
    	name = newName;
    }
    
    /**
     * Returns true if and only if the item is in this Storage Unit
     * 
     * @param item The item to check
     * @throws IllegalArgumentException item cannot be null
     * @return true if and only if the item is in this Storage Unit
     */
    @Override
    public boolean containsItem(Item item) throws IllegalArgumentException
    {
    	if(item == null)
    	{
    	    throw new IllegalArgumentException("Cannot check Storage Unit " + name + " for null item");
    	}
    	
    	if(item.getStorageUnit().equals(this))
        {
    	    return true;
        }
        else
        {
            return false;
        }
    }
    
    /**
     * Tests the quality between two storageUnits.
     * @param other the other storage unit to compare to.
     * @return true if the two storage units are equals, false otherwise.
     */
    @Override
    public boolean equals(Object other)
    {
    	if(other == null)
    	{
    		throw new IllegalArgumentException("Cannot compare Storage Unit to null");
    	}
        if (other instanceof StorageUnit)
        {
            return this.getName().equals(((StorageUnit) other).getName());
        }
        return false;
    }

}

package model;

import java.io.Serializable;
import java.util.NoSuchElementException;
import java.util.Set;

/** This interface represents a Product Container, which
 *  can contain Products and other Product Containers
 *
 * @author Talonos
 */
public abstract class ProductContainer implements Serializable
{
	private static final long serialVersionUID = -5146316949073717664L;
	
	protected String name;

	/**
     * Renames a child product container stored within this product container.
     * Handles error checking for valid names, etc.
     * @param oldName The name of the product container whose name will change.
     * @param newName The new name to give the product container.
     * @throws NoSuchElementException if there is no product by the name of
     * "oldName"
     * @throws IllegalArgumentException if the name is already taken or is 
     * otherwise invalid.
     */
    public void renameContainer(String oldName, String newName) throws NoSuchElementException, IllegalArgumentException
    {
    	throw new UnsupportedOperationException("Implement");
    }
    
    /**
     * Adds a product container to this storage unit. Handles error checking.
     * Because storage units cannot contain other storage units, the container
     * added, by default, is a storage group. The top level container (the house)
     * has its own interface.
     * @param name The name of the product group to add.
     * @throws IllegalArgumentException if the name is already taken or is 
     * otherwise invalid.
     */
    public void addContainer(String name) throws IllegalArgumentException
    {
    	throw new UnsupportedOperationException("Implement");
    }
    
    /**
     * Deletes a product container from this product container. This method will
     * only work if the product container to be deleted exists and is empty.
     * @param name the name of the product to delete.
     * @throws NoSuchElementException if the named product container doesn't exist.
     * @throws IllegalArgumentException if the product container cannot be deleted. 
     * (Because it is, for example, not empty.)
     */
    public void deleteContainer(String name) throws NoSuchElementException, IllegalArgumentException
    {
    	throw new UnsupportedOperationException("Implement");
    }
    
    /**
     * Checks to see if this container is a product group. If it is, then it
     * returns itself, as a product group instead of as a productContainer. 
     * Otherwise, it returns null. This can be used either to check the type of 
     * this ProductContainer or as an alternative to an unsafe typecasting of 
     * "ProductGroup" from "ProductContainer."
     * @return the ProductGroup if this is a product group, null otherwise.
     */
    public ProductGroup beProductGroup()
    {
    	throw new UnsupportedOperationException("Implement");
    }
    
    /**
     * Checks to see if this container is a Storage Unit. If it is, then it
     * returns itself, as a StorageUnit instead of as a productContainer. 
     * Otherwise, it returns null. This can be used either to check the type of 
     * this ProductContainer or as an alternative to an unsafe typecasting of 
     * "StorageUnit" from "ProductContainer."
     * @return the ProductGroup if this is a product group, null otherwise.
     */
    public StorageUnit beStorageUnit()
    {
    	throw new UnsupportedOperationException("Implement");
    }
    
    /**
     * Checks to see if the proposed name is valid in this product group. 
     * It is valid if it meets the criteria for a valid name and if the name is 
     * not already taken in this group.
     * @param proposedName
     * @return true iff given name meets criteria and is not taken
     */
    public boolean isValidName(String proposedName)
    {
    	throw new UnsupportedOperationException("Implement");
    }
    
    /**
     * Returns the product container specified by the string Name, or null if no
     * product container by that name exists as a child node to this container.
     * 
     * Note that this is a ProductContainer object, not a 
     * ChangableProductContainer object, so you cannot simply call a rename 
     * method on it.
     * @param name the name of the product container to return
     * @return the named container.
     */
    public ProductContainer getProductContainer(String name)
    {
    	throw new UnsupportedOperationException("Implement");
    }
    
    /**
     * Returns a set of strings containing the names of all child product
     * containers.
     * @return The set of strings of the names of all child product containers.
     */
    public Set<String> getContainers()
    {
    	throw new UnsupportedOperationException("Implement");
    }
    
    /**
     * Returns a set of strings containing the names of all products within this
     * product group. 
     * @return a set containing the barcodes of all the products.
     */
    public Set<ProductBarcode> getProducts()
    {
    	throw new UnsupportedOperationException("Implement");
    }
    
    /**
     * Removes a product from the Product Group.
     * @param code the barcode of the product to remove
     * @throws NoSuchElementException if the named product doesn't exist.
     */
    public void removeProduct(ProductBarcode code) throws NoSuchElementException
    {
    	throw new UnsupportedOperationException("Implement");
    }
    
    /**
     * Adds a specified product to this productContainer. Not that this assumes
     * a pre-existing product from the product database: This methods looks up
     * that function using the name parameter and then adds that product to 
     * this product group.
     * @param barcode The name of the product to add.
     * @throws IllegalArgumentException if the barcode is invalid or the
     * product already exists in this storage unit.
     */
    public void addProduct(ProductBarcode barcode) throws IllegalArgumentException
    {
    	throw new UnsupportedOperationException("Implement");
    }
    
    /**
     * Checks to see whether this product container has a given product.
     * The search for this product is recursive, affecting all sub-product 
     * containers.
     * 
     * @param code the barcode of the product to check for
     * @return whether or not the product is in this container. 
     */
    public boolean hasProduct(ProductBarcode code)
    {
    	throw new UnsupportedOperationException("Implement");
    }
}

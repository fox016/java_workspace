
package model.persistence;

import java.sql.*;

/** This class defines the interaction that the model can have with the database.
		This class is responsible for opening/commiting/rollingback database transactions
		The execution of individual statements is delegated by the entity specific classes.
	@author Chris Tensmeyer
	@version March 25 2013
*/

class DatabaseFacade implements PersistenceFacade
{
	private Connection connection;
	
	private static DatabaseFacade _databaseFacade;
	
	public static DatabaseFacade instance()
	{
		if (_databaseFacade == null)
			_databaseFacade = new DatabaseFacade();
		return _databaseFacade;
	}
	
	private DatabaseFacade()
	{
		connection = null;
	}

	/** @return Returns a database connection object */
	public static Connection connection()
	{
		throw new UnsupportedOperationException("Not Implemented");
	}

	/** Stores a newly created Item in the data persistence model.
		@param ido The ItemDataObject representing the Item
	*/
	public void createItem(ItemDataObject ido) { throw new UnsupportedOperationException("Not Implemented"); }

	/** Updates an existing Item in the data persistence model.
		@param ido The ItemDataObject representing the Item
	*/
	public void updateItem(ItemDataObject ido) { throw new UnsupportedOperationException("Not Implemented"); }

	/** Removes an Item from the data persistence model.
		@param ido The ItemDataObject representing the Item
	*/
	public void deleteItem(ItemDataObject ido) { throw new UnsupportedOperationException("Not Implemented"); }

	/** Stores a newly created Product in the data persistence model.
		@param pdo The ProductDataObject representing the Item
	*/
	public void createProduct(ProductDataObject pdo) { throw new UnsupportedOperationException("Not Implemented"); }
	
	/** Updates an existing Product in the data persistence model.
		@param pdo The ProductDataObject representing the Item
	*/
	public void updateProduct(ProductDataObject pdo) { throw new UnsupportedOperationException("Not Implemented"); }

	/** Removes a Product from the data persistence model.
		@param pdo The ProductDataObject representing the Item
	*/
	public void deleteProduct(ProductDataObject pdo) { throw new UnsupportedOperationException("Not Implemented"); }

	/** Stores a newly created ProductGroup in the data persistence model.
		@param pgdo The GroupDataObject representing the Item
	*/
	public void createGroup(GroupDataObject pgdo) { throw new UnsupportedOperationException("Not Implemented"); }

	/** Updates an existing ProductGroup in the data persistence model.
		@param pgdo The GroupDataObject representing the Item
	*/
	public void updateGroup(GroupDataObject pgdo) { throw new UnsupportedOperationException("Not Implemented"); }

	/** Removes a ProductGroup from the data persistence model.
		@param pgdo The GroupDataObject representing the Item
	*/
	public void deleteGroup(GroupDataObject pgdo) { throw new UnsupportedOperationException("Not Implemented"); }

	/** Stores a newly created StorageUnit in the data persistence model.
		@param udo The UnitDataObject representing the Item
	*/
	public void createUnit(UnitDataObject udo) { throw new UnsupportedOperationException("Not Implemented"); }

	/** Updates an existing StorageUnit in the data persistence model.
		@param udo The UnitDataObject representing the Item
	*/
	public void updateUnit(UnitDataObject udo) { throw new UnsupportedOperationException("Not Implemented"); }

	/** Removes a StorageUnit from the data persistence model.
		@param udo The UnitDataObject representing the Item
	*/
	public void deleteUnit(UnitDataObject udo) { throw new UnsupportedOperationException("Not Implemented"); }

	/** Loads the persisted model into memory at application start 
	 * @throws SQLException */
	public void loadAll() throws SQLException
	{
		DatabaseModelLoader loader = new DatabaseModelLoader();
		loader.load();
	}

	/** Saves the memory model into persisted memory at application close */
	public void saveAll() { throw new UnsupportedOperationException("Not Implemented"); }

	/** Begins a transaction */
	public void begin() { throw new UnsupportedOperationException("Not Implemented"); }

	/** Commits a transaction */
	public void end() { throw new UnsupportedOperationException("Not Implemented"); }
}


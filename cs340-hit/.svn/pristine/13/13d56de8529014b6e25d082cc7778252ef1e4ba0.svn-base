
package model.persistence;

import model.*;

/** This class is configured after parsing command line inputs to determine the data persistence mode 
	@author Chris Tensmeyer
	@version March 25 2013
*/

public class PersistenceFactory
{
	private static PersistenceCreator creator = null;

	private PersistenceFactory() { }
	/** Factory method to get a reference to the single PersistenceFacade
		@return The singleton PersistenceFacade
	*/
	public static PersistenceFacade getFacade()
	{
		if(creator == null)
		{
			configure(new SerializationCreator());
		}
		return creator.getFacade();
	}

	/** Factory method to create an ItemDataObejct
		@param item The model object represented by the returned DataObject
		@return Returns a new ItemDataObject representing item
	*/
	public static ItemDataObject createItemDataObject(Item item)
	{
		return creator.createItemDataObject(item);
	}

	/** Factory method to create a ProductDataObejct
		@param product The model object represented by the returned DataObject
		@return Returns a new ProductDataObject representing product
	*/
	public static ProductDataObject createProductDataObject(Product product)
	{
		return creator.createProductDataObject(product);
	}

	/** Factory method to create a GroupDataObejct
		@param group The model object represented by the returned DataObject
		@return Returns a new GroupDataObject representing product
	*/
	public static GroupDataObject createGroupDataObject(ProductGroup group)
	{
		return creator.createGroupDataObject(group);
	}

	/** Factory method to create a UnitDataObject
		@param unit The model object represented by the returned DataObject
		@return Returns a new UnitDataObject representing unit
	*/
	public static UnitDataObject createUnitDataObject(StorageUnit unit)
	{
		return creator.createUnitDataObject(unit);
	}

	/** This method may be called only once to set the Database Persistence Mode
		@param c The Creator object for the Persistence mode we are using
	*/
	public static void configure(PersistenceCreator c)
	{
		if(creator != null)
			throw new RuntimeException("Illegal Attempt to reconfigure Database Persistence Mode");
		creator = c;
	}
}


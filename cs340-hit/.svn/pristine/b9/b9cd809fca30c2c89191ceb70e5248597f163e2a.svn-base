package gui.reports.removed;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.util.Calendar;
import java.util.Date;

import model.House;
import model.report.ReportGenerator;
import model.report.ReportType;

import gui.common.*;

/**
 * Controller class for the removed items report view.
 */
public class RemovedReportController extends Controller implements
		IRemovedReportController {

	/**
	 * Constructor.
	 * 
	 * @param view Reference to the removed items report view
	 */
	public RemovedReportController(IView view) {
		super(view);

		construct();
	}

	//
	// Controller overrides
	//

	/**
	 * Returns a reference to the view for this controller.
	 * 
	 * {@pre None}
	 * 
	 * {@post Returns a reference to the view for this controller.}
	 */
	@Override
	protected IRemovedReportView getView() {
		return (IRemovedReportView) super.getView();
	}

	/**
	 * Sets the enable/disable state of all components in the controller's view.
	 * A component should be enabled only if the user is currently
	 * allowed to interact with that component.
	 * 
	 * {@pre None}
	 * 
	 * {@post The enable/disable state of all components in the controller's view
	 * have been set appropriately.}
	 */
	@Override
	protected void enableComponents() {
		getView().enableFormat(true);
		getView().enableSinceDate(true);
		getView().enableSinceDateValue(getView().getSinceDate());
		getView().enableSinceLast(true);
		getView().enableOK(true);
	}

	/**
	 * Loads data into the controller's view.
	 * 
	 *  {@pre None}
	 *  
	 *  {@post The controller has loaded data into its view}
	 */
	@Override
	protected void loadValues() {
		getView().setFormat(FileFormat.PDF);
		getView().setSinceLast(true);
		getView().setSinceDate(false);
		getView().setSinceDateValue(new Date());
		getView().setSinceLastValue(House.instance().getRemovedReportLastTime().getTime());
	}

	//
	// IExpiredReportController overrides
	//

	/**
	 * This method is called when any of the fields in the
	 * removed items report view is changed by the user.
	 */
	@Override
	public void valuesChanged() {
		enableComponents();
	}

	/**
	 * This method is called when the user clicks the "OK"
	 * button in the removed items report view.
	 */
	@Override
	public void display() {
		
		// Get start time from view
		Calendar start = Calendar.getInstance();
		if(getView().getSinceDate())
		{
			start.setTime(getView().getSinceDateValue());
		}
		else
		{
			start.setTime(House.instance().getRemovedReportLastTime().getTime());
		}
		
		// Update last time
		House.instance().setRemovedReportLastTime(Calendar.getInstance());
		
		File removedReport;
		
		try {
			
			// Generate HTML report
			if(getView().getFormat().equals(FileFormat.HTML))	
				removedReport = ReportGenerator.generateRemovedItemReport("removed.html", ReportType.HTML, start);
			
			// Generate PDF report
			else
				removedReport = ReportGenerator.generateRemovedItemReport("removed.pdf", ReportType.PDF, start);
	
			Desktop.getDesktop().open(removedReport);
		
		}catch (IOException e)
		{
			getView().displayErrorMessage("IOException");
			e.printStackTrace();
		}
	}
}


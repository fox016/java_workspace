package model;

import java.io.Serializable;

/**
 * This class is a singleton used to generate new
 * ItemBarcodes such that two ItemBarcodes never have
 * the same value
 * 
 * @author Nate Fox
 *
 */
public class BarcodeGenerator implements Serializable {

	private static final long serialVersionUID = 8358041358271359055L;

	private static final int BARCODE_SIZE = 12;
	
	private static BarcodeGenerator _generator;
	private int[] lastCode; // Holds the last code generated, used to determine next code
	
	private int lastProductContainerCode;
	
	// Constructor called only during first call to instance()
	private BarcodeGenerator()
	{
		assert(lastCode == null);
		
		if(lastCode != null) return;
		
		lastCode = new int[BARCODE_SIZE];
		
		lastCode[0] = 4; // Always start with 4
		for(int i = 1; i < lastCode.length; i++)
			lastCode[i] = 0;
		
		lastCode[lastCode.length - 1] = getCheck(lastCode);
		
		lastProductContainerCode = 1;
	}
	
	/**
	 * Returns the single instance of BarcodeGenerator
	 * 
	 * @return The single instance of BarcodeGenerator
	 */
	public static BarcodeGenerator instance()
	{
		assert(true);
		
		if(_generator == null)
			_generator = new BarcodeGenerator();
		return _generator;
	}
	
	public static void setInstance(BarcodeGenerator generator)
	{
		_generator = generator;
	}
	
	/**
	 * Resets instance
	 */
	public void reset()
	{
		_generator = null;
	}
	
	
	/**
	 * Returns the next sequential ProductContainer ID
	 * 
	 * @return The next sequential ProductContainerID
	 * @throws IllegalStateException Thrown if last PCID is Long.MAX_VALUE
	 */
	public int generatePCID() throws IllegalStateException
	{
		if(lastProductContainerCode == Long.MAX_VALUE)
		{
			throw new IllegalStateException("No more valid Product Container codes");
		}
		
		lastProductContainerCode++;
		
		return lastProductContainerCode;
	}
	
	/**
	 * Generates the next Barcode value
	 * 
	 * @throws IllegalStateException
	 * @return The next generated Barcode value (as String)
	 */
	public String generateBarcode() throws IllegalStateException
	{
		if(lastCode == null)
		{
			throw new IllegalStateException("Barcode generation is based " +
					"on previous barcode, but there is none set");
		}
		
		int[] code = new int[BARCODE_SIZE];
		
		code[0] = 4; // Always start with 4
		
		// Calculate next barcode value
		boolean changeNext = true;
		for(int i = 1; i < lastCode.length - 1; i++)
		{
			if(changeNext)
			{
				code[i] = (lastCode[i] + 1) % 10;
				if(code[i] == 0) changeNext = true;
				else changeNext = false;
			}
			else
			{
				code[i] = lastCode[i];
				changeNext = false;
			}
		}
		
		// Calculate check digit (final digit)
		code[code.length - 1] = getCheck(code);
		
		// Update lastCode
		lastCode = code;
		
		// Convert int[] to char[]
		char[] charCode = new char[BARCODE_SIZE];
		for(int i = 0; i < charCode.length; i++)
			charCode[i] = (Integer.toString(code[i])).charAt(0);
		
		return new String(charCode);
	}
	
	/**
	 * Calculates the check digit (final digit) of a UPC-A barcode
	 * 
	 * @param code An integer array representing the incomplete Barcode
	 * @return The check digit of the UPC-A barcode
	 */
	private int getCheck(int[] code)
	{
		assert(code != null);
		assert(code.length == BARCODE_SIZE);
		
		int sumOdd = 0;
		int sumEven = 0;
		for(int i = 0; i < code.length - 1; i++) // Don't include last digit
		{
			if(i % 2 == 1) // Tests to see if i+1 is even, really
				sumEven += code[i];
			else
				sumOdd += code[i];
		}
		
		int result = (sumOdd * 3 + sumEven) % 10;

		// Return check digit
		if(result != 0)
			return 10 - result;
		return 0;
	}

}

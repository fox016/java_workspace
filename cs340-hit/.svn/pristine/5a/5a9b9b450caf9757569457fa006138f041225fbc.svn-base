package model;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Serializable;
import java.util.Map;
import java.util.TreeMap;
import java.util.Set;
import java.util.TreeSet;

/** This class represents a House, a singleton class
 *  that is responsible for holding Storage Units at the root
 * 
 * @author Nathan Fox
 *
 */
public class House implements Serializable
{
	private static House _house;
	
	private static final long serialVersionUID = -8691851376543756581L;

	private Set<StorageUnit> units;
	private Map<String, StorageUnit> nameTable;
	
	/* 
	 * These need to be serialized, so House must
	 * have pointers to them
	 */
	@SuppressWarnings("unused")
	private BarcodeGenerator barcodeGenerator;
	@SuppressWarnings("unused")
	private ItemManager itemManager;
	@SuppressWarnings("unused")
	private ProductManager productManager;
	
	private House()
	{
		assert(true);
		
		units = new TreeSet<StorageUnit>();
		
		barcodeGenerator = BarcodeGenerator.instance();
		itemManager = ItemManager.instance();
		productManager = ProductManager.instance();
		nameTable = new TreeMap<String, StorageUnit>();
	}

	/** Returns the single instance of House
	 * 
	 * @return	The single instance of House
	 */
	public static House instance()
	{
		assert(true);
		
		if(_house == null)
			_house = new House();
		return _house;
	}
	
	/** Adds a Storage Unit to the root (house)
	 * 
	 * @param unit The Storage Unit to be added to the house
	 * @throws IllegalArgumentException
	 */
	public void addStorageUnit(StorageUnit unit) throws IllegalArgumentException
	{
		// Check validity
		if(unit == null)
		{
			throw new IllegalArgumentException("You did not provide a name, " +
					"or a Storage Unit with this name already exists");
		}
		if(!isValidName(unit.getName()))
		{
			throw new IllegalArgumentException("You did not provide a name, " +
					"or a Storage Unit with this name already exists");
		}
		
		// Add Storage Unit to house
		units.add(unit);
		nameTable.put(unit.getName(), unit);
	}

	/** Removes a Storage Unit from the root (house)
	 * 
	 * @throws IllegalArgumentException
	 * @param unit The Storage Unit to be removed from the house
	 */
	public void removeStorageUnit(StorageUnit unit) throws IllegalArgumentException
	{
		if(unit == null)
			throw new IllegalArgumentException("Cannot remove null unit");
		
		// Remove Storage Unit from house
		units.remove(unit);
		nameTable.remove(unit.getName());
	}

	/** Changes the name of the Storage Unit with name oldName to newName
	 * 
	 * @param unit The Storage Unit to change
	 * @param newName The name to change to
	 * @throws IllegalArgumentException
	 */
	public void setName(StorageUnit unit, String newName) throws IllegalArgumentException
	{
		// Check validity
		if(!isValidName(newName))
		{
			throw new IllegalArgumentException("You did not provide a name, " +
					"or a Storage Unit with this name already exists");
		}
		if(unit == null)
		{
			throw new IllegalArgumentException("Cannot change name of null Storage Unit");
		}
		if(!containsUnit(unit))
		{
			throw new IllegalArgumentException("Cannon change name of Storage Unit" +
					" that is not in house");
		}
		
		unit.setName(newName);
	}
	
	/** Checks if the given name is both valid and available
	 * 
	 * @param name	The name to test
	 * @return	Returns true iff name is both valid and available
	 */
	public boolean isValidName(String name)
	{
		assert(true);
		
		// Test for null
		if(name == null) return false;
		
		// Test for empty
		if(name.isEmpty()) return false;
		
		// Test for availability
		if(nameTable.containsKey(name)) return false;
		
		return true;
	}
	
	/** Returns all Storage Units to caller
	 * 
	 * @return Set of all Storage Units
	 */
	public Set<StorageUnit> getAllUnits() throws IllegalStateException
	{
		if(units == null)
			throw new IllegalStateException("Set of units should be created with House");
		
		return units;
	}
	
	/**
	 * Determines if this Storage Unit is in the House
	 * 
	 * @param unit
	 * @return true iff House has this Storage Unit
	 * @throws IllegalStateException
	 * @throws IllegalArgumentException
	 */
	public boolean containsUnit(StorageUnit unit)
		throws IllegalStateException, IllegalArgumentException
	{
		if(units == null)
			throw new IllegalStateException("Set of units should be created with House");
		if(unit == null)
			throw new IllegalArgumentException("Cannot test for null unit");
		
		return units.contains(unit);
	}
	
	/**
	 * Uses the DataSerializer to serialize existing data
	 * 
	 * @param filename	The complete class path to save the data to
	 * @throws IOException 
	 * @throws FileNotFoundException 
	 */
	public void save(String filename) throws FileNotFoundException, IOException
	{
		DataSerializer.instance().save(filename);
	}
	
	/**
	 * Uses the DataSerializer to load serialized data from a file
	 * 
	 * @param filename	The complete class path to load the data from
	 * @throws ClassNotFoundException 
	 * @throws IOException 
	 * @throws FileNotFoundException 
	 */
	public void load(String filename) throws FileNotFoundException, 
		IOException, ClassNotFoundException
	{
		DataSerializer.instance().load(_house, filename);
	}
}


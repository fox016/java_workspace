package model.report;

import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.HashSet;
import java.util.Set;

import model.Item;
import model.ItemManager;
import model.StorageUnit;
import model.ProductGroup;
import model.Product;

	/** 
		This class extracts information needed for the Product Statistics Report
		@author Christopher Tensmeyer
		@version March 6th, 2013
	*/

class ProductStatisticsVisitor implements Visitor
{
	private ReportBuilder builder;
	private final int COLUMNS = 10;
	
	private Calendar startDate;
	private Calendar endDate;

	/** Constructs a ProductStatisticsVisitor
		@param builder The builder that constructs the Report
		@param numMonths The number of months to use in
			constructing the Product Statistics Report
		@throws IOException
	*/
	public ProductStatisticsVisitor(ReportBuilder builder, int numMonths)
		throws IOException
	{
		this.builder = builder;
		builder.writeTitle("Product Report (" + numMonths + " Months)");
		builder.startTable(COLUMNS);	
		builder.writeTableHeader(getColumnTitles());
		calculateDateRange(numMonths);
	}
	
	/**
	 * Calculates range of dates to be used to build report
	 * Sets class variables startDate and endDate
	 * 
	 * @param months Number of months to go back
	 */
	private void calculateDateRange(int months)
	{
		endDate = Calendar.getInstance();
		endDate = rewindToMidnight(endDate);
		startDate = (Calendar)endDate.clone();
		startDate.add(Calendar.MONTH, months * -1);
		
		//System.out.println(DateUtils.formatDateTime(startDate.getTime()));
		//System.out.println(DateUtils.formatDateTime(endDate.getTime()));
	}

	/** Visits a StorageUnit
		@param unit The StorageUnit to visit
	*/
	public void visit(StorageUnit unit)
	{
		throw new UnsupportedOperationException("Storage Unit Visit Not Implemented");
	}

	/** Visits a ProductGroup
		@param group The ProductGroup to visit
	*/
	public void visit(ProductGroup group)
	{
		throw new UnsupportedOperationException("Product Group Visit Not Implemented");
	}

	/** Visits a Product
		@param product The Product to visit
	*/
	public void visit(Product product)
	{
		// Get all items of product
		Set<Item> allItems = ItemManager.instance().getItems(product);
		Set<Item> usedItems = getUsedItems(allItems);
		Set<Item> currentItems = getCurrentItems(allItems);
		
		// Calculate supply at beginning of reporting period
		int initialSupply = getInitialSupply(allItems);
		int[] supplyList = getSupplyList(allItems, initialSupply);
		
		// Calculate necessary values
		int currentSupply = currentItems.size();
		String averageSupply = getAverage(supplyList);
		int minSupply = getMin(supplyList);
		int maxSupply = getMax(supplyList);
		int usedSupply = usedItems.size();
		int addedSupply = getAddedSupply(allItems);
		String averageUsedAge = getAverageAge(usedItems);
		long maxUsedAge = getMaxAge(usedItems);
		String averageCurrentAge = getAverageAge(currentItems);
		long maxCurrentAge = getMaxAge(currentItems);
		
		// Set row values
		String[] row = new String[COLUMNS];
		row[0] = product.getDescription();
		row[1] = product.getBarcode().toString();
		row[2] = product.getSize().toString();
		row[3] = product.getThreeMonthSupply() + "";
		row[4] = currentSupply + " / " + averageSupply;
		row[5] = minSupply + " / " + maxSupply;
		row[6] = usedSupply + " / " + addedSupply;
		row[7] = product.getShelfLife() + " months";
		row[8] = averageUsedAge + " days / " + maxUsedAge + " days";
		row[9] = averageCurrentAge + " days / " + maxCurrentAge + " days";
		
		// Write row to file
		try {
			builder.writeTableRow(row);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * @param allItems A set of all items of a product
	 * @param initialSupply How many items of a product were in the system
	 * at the start of the report period
	 * @return A map between 
	 */
	private int[] getSupplyList(Set<Item> allItems, int initialSupply)
	{
		long reportTimeMillis = endDate.getTimeInMillis() - startDate.getTimeInMillis();
		int reportTimeDays = (int)Math.round(reportTimeMillis / (24.0 * 60.0 * 60.0 * 1000.0));
		int[] supplyList = new int[reportTimeDays];
		
		int prevSupply = initialSupply;
		Calendar currentDate = (Calendar)startDate.clone();
		for(int i = 0; i < supplyList.length; i++)
		{
			supplyList[i] = prevSupply + getItemsAdded(currentDate, allItems) - 
					getItemsRemoved(currentDate, allItems);
			prevSupply = supplyList[i];
			currentDate.add(Calendar.HOUR, 24);
		}
		
		return supplyList;
	}
	
	/**
	 * @param currentDate
	 * @param allItems
	 * @return Count of all items that were removed on currentDate
	 */
	private int getItemsRemoved(Calendar currentDate, Set<Item> allItems)
	{
		int itemsRemoved = 0;
		for(Item item : allItems)
		{
			if(!item.isInSystem() && rewindToMidnight(item.getExitTime()).equals(currentDate))
				itemsRemoved++;
		}
		return itemsRemoved;
	}

	/**
	 * @param currentDate
	 * @param allItems
	 * @return Count of all items that were added on currentDate
	 */
	private int getItemsAdded(Calendar currentDate, Set<Item> allItems)
	{
		int itemsAdded = 0;
		for(Item item : allItems)
		{
			if(item.getEntryDate().equals(currentDate))
				itemsAdded++;
		}
		return itemsAdded;
	}

	/**
	 * @param list
	 * @return Average of all values in int array
	 */
	private String getAverage(int[] list)
	{
		double total = 0.0;
		for(int i = 0; i < list.length; i++)
		{
			total += list[i];
		}
		DecimalFormat df = new DecimalFormat("#0.0");
		return df.format(total / list.length);
	}
	
	/**
	 * @param list
	 * @return Minimum value in an int array
	 */
	private int getMin(int[] list)
	{
		int min = Integer.MAX_VALUE;
		for(int i = 0; i < list.length; i++)
		{
			if(list[i] < min)
				min = list[i];
		}
		return min;
	}
	
	/**
	 * @param list
	 * @return Maximum value in an int array
	 */
	private int getMax(int[] list)
	{
		int max = 0;
		for(int i = 0; i < list.length; i++)
		{
			if(list[i] > max)
				max = list[i];
		}
		return max;
	}

	/**
	 * @param allItems
	 * @return Count of items in system when report started
	 */
	private int getInitialSupply(Set<Item> allItems) {
		int initialSupply = 0;
		for(Item item : allItems)
		{
			if(item.getEntryDate().compareTo(startDate) < 0)
			{
				if(item.getExitTime() == null || item.getExitTime().compareTo(startDate) >= 0)
				{
					initialSupply++;
				}
			}
		}
		return initialSupply;
	}
	
	/**
	 * @param items
	 * @return The age of the oldest item in the set of items
	 */
	private long getMaxAge(Set<Item> items)
	{
		long maxAge = 0;
		for(Item item : items)
		{
			Calendar endTime = item.getExitTime();
			if(endTime == null)
				endTime = endDate;
			else
				endTime = rewindToMidnight(endTime);
			long ageMillis = endTime.getTimeInMillis() - item.getEntryDate().getTimeInMillis();
			long ageDays = Math.round(ageMillis / (24.0 * 60.0 * 60.0 * 1000.0));
			if(ageDays > maxAge)
				maxAge = ageDays;
		}
		return maxAge;
	}

	/**
	 * @param items
	 * @return The average age of all items in the set of items
	 */
	private String getAverageAge(Set<Item> items) {
		double averageUsedAge = 0;
		double totalAge = 0;
		for(Item item : items)
		{
			Calendar endTime = item.getExitTime();
			if(endTime == null)
				endTime = endDate;
			else
				endTime = rewindToMidnight(endTime);
			long ageMillis = endTime.getTimeInMillis() - item.getEntryDate().getTimeInMillis();
			double ageDays = ageMillis / (24.0 * 60.0 * 60.0 * 1000.0);
			totalAge += ageDays;
		}
		averageUsedAge = totalAge / items.size();
		DecimalFormat df = new DecimalFormat("#0.0");
		return df.format(averageUsedAge);
	}

	/**
	 * @param allItems
	 * @return All items that were removed after the report's start date
	 */
	private Set<Item> getUsedItems(Set<Item> allItems) {
		Set<Item> usedItems = new HashSet<>();
		for(Item item : allItems)
		{
			if(!item.isInSystem())
			{
				if(item.getExitTime().compareTo(startDate) >= 0)
				{
					usedItems.add(item);
				}
			}
		}
		return usedItems;
	}
	
	/**
	 * @param allItems
	 * @return All items that have not been removed
	 */
	private Set<Item> getCurrentItems(Set<Item> allItems) {
		Set<Item> currentItems = new HashSet<>();
		for(Item item : allItems)
		{
			if(item.isInSystem())
			{
				assert(item.getExitTime() == null);
				currentItems.add(item);
			}
		}
		return currentItems;
	}
	
	/**
	 * @param allItems
	 * @return Count of all items (live or dead) that were added to the system
	 * after the report's start date
	 */
	private int getAddedSupply(Set<Item> allItems) {
		int addedSupply = 0;
		for(Item item : allItems)
		{
			if(item.getEntryDate().compareTo(startDate) >= 0)
			{
				addedSupply++;
			}
		}
		return addedSupply;
	}
	
	/**
	 * @return Column titles for this report
	 */
	private String[] getColumnTitles(){
		String[] columnTitles = {"Description","Barcode", "Size", "3-Month Supply",
				"Supply: Cur/Avg", "Supply: Min/Max", "Supply: Used/Added", "Shelf Life",
				"Used Age: Avg/Max", "Cur Age: Avg/Max"};
		return columnTitles;
	}
	
	/**
	 * @param c A calendar object to rewind
	 * @return The calendar object rewinded back to midnight
	 */
	private Calendar rewindToMidnight(Calendar c)
	{
		c.set(Calendar.HOUR, 0);
		c.set(Calendar.AM_PM, Calendar.AM);
		c.set(Calendar.MINUTE, 0);
		c.set(Calendar.SECOND, 0);
		c.set(Calendar.MILLISECOND, 0);
		
		return c;
	}
}


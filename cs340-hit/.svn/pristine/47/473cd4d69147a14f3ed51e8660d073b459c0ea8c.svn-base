package model;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Serializable;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/** This class represents a House, a singleton class
 *  that is responsible for holding Storage Units at the root
 * 
 * @author Nathan Fox
 *
 */
public class House implements Serializable
{
	private static House _house;
	
	private static final long serialVersionUID = -8691851376543756581L;

	private Set<StorageUnit> units;
	private Map<String, StorageUnit> nameTable;
	
	private House()
	{
		units = new TreeSet<StorageUnit>();
	}

	/** Returns the single instance of House
	 * 
	 * @return	The single instance of House
	 */
	public static House instance()
	{
		if(_house == null)
			_house = new House();
		return _house;
	}
	
	/** Adds a Storage Unit to the root (house)
	 * 
	 * @param unit The Storage Unit to be added to the house
	 * @throws IllegalArgumentException
	 */
	public void addStorageUnit(StorageUnit unit) throws IllegalArgumentException
	{
		// Check validity
		if(!isValidName(unit.getName()))
		{
			throw new IllegalArgumentException("You did not provide a name or a Storage Unit with this name already exists");
		}
		
		// Add Storage Unit to house
		units.add(unit);
		nameTable.put(unit.getName(), unit);
	}

	/** Removes a Storage Unit from the root (house)
	 * 
	 * @param unit The Storage Unit to be removed from the house
	 */
	public void removeStorageUnit(StorageUnit unit)
	{
		// Remove Storage Unit from house
		units.remove(unit);
		nameTable.remove(unit.getName());
	}

	/** Changes the name of the Storage Unit with name oldName to newName
	 * 
	 * @param unit The Storage Unit to change
	 * @param newName The name to change to
	 * @throws IllegalArgumentException
	 */
	public void setName(StorageUnit unit, String newName)
	{
		// Check validity
		if(!isValidName(newName))
		{
			throw new IllegalArgumentException("You did not provide a name or a Storage Unit with this name already exists");
		}
		
		unit.setName(newName);
	}
	
	/** Checks if the given name is both valid and available
	 * 
	 * @param name	The name to test
	 * @return	Returns true iff name is both valid and available
	 */
	public boolean isValidName(String name)
	{
		// Test for empty
		if(name.length() < 1) return false;
		
		// Test for availability
		if(nameTable.containsKey(name)) return false;
		
		return true;
	}
	
	/** Returns all Storage Units to caller
	 * 
	 * @return Set of all Storage Units
	 */
	public Set<StorageUnit> getAllUnits()
	{
		return units;
	}
	
	/**
	 * Uses the DataSerializer to serialize existing data
	 * 
	 * @param filename	The complete class path to save the data to
	 * @throws IOException 
	 * @throws FileNotFoundException 
	 */
	public void save(String filename) throws FileNotFoundException, IOException
	{
		DataSerializer.instance().save(filename);
	}
	
	/**
	 * Uses the DataSerializer to load serialized data from a file
	 * 
	 * @param filename	The complete class path to load the data from
	 * @throws ClassNotFoundException 
	 * @throws IOException 
	 * @throws FileNotFoundException 
	 */
	public void load(String filename) throws FileNotFoundException, IOException, ClassNotFoundException
	{
		DataSerializer.instance().load(_house, filename);
	}
}


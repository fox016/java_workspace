package model;

import model.House;
import model.Item;
import model.ProductContainer;
import model.StorageUnit;

/** This class represents a StorageUnit, which contains
 *  Items and Product Groups
 *
 * @author Talonos
 */
public class StorageUnit extends ProductContainer
{
	private static final long serialVersionUID = -2049857044314078747L;
	
	private String name;
	
	public StorageUnit(String name)
	{
		this.name = name;
	}
  
    /**
     * Adds item to this Storage unit. If the item is of a product type that
     * does not currently exist anywhere within this storage unit, then this
     * method adds the product to the top level of this Storage Unit
     * automatically.
     * 
     * @throws IllegalArgumentException item cannot be null
     * @param item The Item to add
     */
    public void addItem(Item item) throws IllegalArgumentException
    {
    	if(item == null)
    	{
    		throw new IllegalArgumentException("Cannot add null Item to Storage Unit");
    	}
    	
    	item.setStorageUnit(this);
    }
    
    /**
     * Removes an item from this storage unit. By default, this item does not go
     * anywhere else. To transfer items from one Storage Unit to another, use
     * TransferItems.
     * 
     * @throws IllegalArgumentException if item is not in this Storage Unit
     * 
     * @param item The item to remove
     */
    public void removeItem(Item item) throws IllegalArgumentException
    {
    	if(!(this.containsItem(item)))
    	{
    		throw new IllegalArgumentException("Cannot remove item " +
    				item.getItemBarcode().toString() + " because it is not in unit " + name);
    	}
    	
    	item.remove();
    }
    
    /**
     * Transfers items from the calling storage unit to the storage unit
     * specified by "Destination".
     * 
     * @throws IllegalArgumentException item must be in unit, destination must be valid Storage Unit
     * @param items the barcodes of the items to transfer.
     * @param destination the storage unit to transfer them to.
     */
    public void transferItem(Item item, StorageUnit destination) throws IllegalArgumentException
    {

    	if(!(this.containsItem(item)))
    	{
    		throw new IllegalArgumentException("Cannot transfer item " +
    				item.getItemBarcode().toString() + " because it is not in unit " + name);
    	}
    	if(destination == null)
    	{
    		throw new IllegalArgumentException("Cannot transfer item to null Storage Unit");
    	}
    	if(destination.equals(this))
    	{
    		throw new IllegalArgumentException("Item already in Storage Unit " + name);
    	}
    	
    	item.setStorageUnit(destination);
    }
    
    /**
     * Returns the name of the Storage Unit
     * 
     * @throws IllegalStateException Storage Unit should have name upon construction
     * @return name of Storage Unit
     */
    public String getName() throws IllegalStateException
    {
    	if(name == null)
    	{
    		throw new IllegalStateException("Storage Unit should have name upon construction");
    	}
    	
    	return name;
    }
    
    /**
     * This method should be called from the House, which
     * checks to make sure that the new name is valid
     * 
     * @throws IllegalArgumentException if name is not valid
     * @param newName
     */
    public void setName(String newName) throws IllegalArgumentException
    {
    	if(!(House.instance().isValidName(newName)))
    	{
    		throw new IllegalArgumentException("The name " + newName + " is not valid");
    	}
    	
    	name = newName;
    }
    
    /**
     * Returns true iff item is in this Storage Unit
     * 
     * @param item The item to check
     * @throws IllegalArgumentException item cannot be null
     * @return true iff item is in this Storage Unit
     */
    public boolean containsItem(Item item) throws IllegalArgumentException
    {
    	if(item == null)
    	{
    		throw new IllegalArgumentException("Cannot check Storage Unit " + name + " for null item");
    	}
    	
    	if(item.getStorageUnit().equals(this))
    		return true;
    	return false;
    }
    
    @Override
    public boolean equals(Object other)
    {
    	if(other == null)
    	{
    		throw new IllegalArgumentException("Cannot compare Storage Unit to null");
    	}
    	
    	return this.getName().equals(((StorageUnit) other).getName());
    }
}
